install.packages("R2WinBUGS")
library(R2WinBUGS)
library(WinBUGS)
library(RBugs)
library(BUGS)
install.packages("R2WinBUGS")
library(BUGS)
library(WinBUGS)
library(R2WinBUGS)
install.packages("foreign")
n = 1000
p = 1/6
? qnorm
qnorm(0)
qnorm(0.05, mean = n*p, sd = sqrt(n*p*(1-p)))
qnorm(0.25, mean = n*p, sd = sqrt(n*p*(1-p)))
qnorm(0.50, mean = n*p, sd = sqrt(n*p*(1-p)))
qnorm(0.75, mean = n*p, sd = sqrt(n*p*(1-p)))
qnorm(0.95, mean = n*p, sd = sqrt(n*p*(1-p)))
? beta
func <- function(a, b, n, y) {}
func <- function(a, b, n, y) {
t1 = a*b/((a+b)^2*(a+b+1))
t2 = (a+y)*(b+n-y)/((a+b+n)^2*(a+b+n+1))
return (t2 - t1)
}
func(2,2,100,30)
func(1,1,100,30)
func(2,3,100,70)
func(2,3,100,50)
func(2,3,100,10)
func(2,3,100,99)
func(3,3,100,99)
func(4,4,100,50)
func(4,4,100,10)
func(10,10,100,50)
func(20,10,100,50)
func(20,20,100,50)
func(20,20,5,1)
func(2,10,5,1)
func(2,1,1,1)
func(2,1,1,0)
func(2,3,1,0)
func(4.5,3,1,0)
func(5,20,1,0)
func(5,10,1,0)
func(5,100,1,0)
func(5,100,2,0)
func(5,100,2,1)
func(5,1,2,1)
func(1,5,2,1)
func(1,3,2,1)
func(1,4,2,1)
func(1,5,2,1)
func(1,6,2,1)
func <- function(n) {
}
1/1600 + 10/400
1/(1/1600 + 10/400)
n = 10
s = 1/1600 + n/400
m = s/2 * (180/1600 + 150*n/400)
s = 1/ (1/1600 + n/400)
m = s/2 * (180/1600 + 150*n/400)
m
m = s * (180/1600 + 150*n/400)
m
s
n = 100
s = 1/ (1/1600 + n/400)
m = s * (180/1600 + 150*n/400)
s
m
d = 0.6
c = 0.5
d^2 / sqrt((1-d^2)^2 + (2*c*d)^2)
2*c*d / (1 - d^2)
d = 0.2
d^2 / sqrt((1-d^2)^2 + (2*c*d)^2)
2*c*d / (1 - d^2)
atan(2*c*d / (1 - d^2))
atan(2*c*d / (1 - d^2)) * 180 / 3.14
atan(0.9375) * 180 / 3.14
q()
install.packages("coda")
install.packages("rstan")
q()
?? longley
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
setwd("..")
setwd("C:/Users/Fan/ownCloud/Study/2018spring/Bayesian/HW9")
# Q1
dat = datasets::longley
# Q1
dat = datasets::longley
y = dat$GNP.deflator
X = dat$Population
install.packages("arm")
library("arm")
# Q1
dat = datasets::longley
y = dat$GNP.deflator
X = dat$Population
mod = arm::bayesglm(y ~ X,
prior.mean=0,
prior.scale=Inf,
prior.df=Inf)
summary(mod)
plot(X, y)
library("arm")
# Q1
dat = datasets::longley
y = dat$GNP.deflator
X = dat$Population
mod = arm::bayesglm(y ~ X,
prior.mean=0,
prior.scale=Inf,
prior.df=Inf)
summary(mod)
n = length(y)
k = 2
s2 = sumsq(mod$residuals)/(n-k)
posterior.mean.sigmasq = (n-k) * s2 / (n-k-2)
s2 = sumsq(mod$residuals)/(n-k)
library("arm")
# Q1
dat = datasets::longley
y = dat$GNP.deflator
X = dat$Population
mod = arm::bayesglm(y ~ X,
prior.mean=0,
prior.scale=Inf,
prior.df=Inf)
summary(mod)
n = length(y)
k = 2
s2 = sum(mod$residuals ^ 2)/(n-k)
posterior.mean.sigmasq = (n-k) * s2 / (n-k-2)
posterior.mean.sigmasq = (n-k) * s2 / (n-k-2)
posterior.mean.sigmasq
mod = arm::bayesglm(y ~ X,
prior.mean=0,
prior.scale=1,
prior.df=Inf)
summary(mod)
mod$coefficients
mod = arm::bayesglm(y ~ X,
prior.mean=0,
prior.scale=1,
prior.df=Inf)
summary(mod)
posterior.mean.beta = mod$coefficients
posterior.mean.beta
mod = arm::bayesglm(y ~ X,
prior.mean=0,
prior.scale=1,
prior.df=Inf,
prior.mean.for.intercept=0,
prior.scale.for.intercept=1,
prior.df.for.intercept=Inf)
summary(mod)
posterior.mean.beta = mod$coefficients
posterior.mean.beta
install.packages("BMS")
library("BMS")
install.packages("bayess")
library("bayess")
mod.full = BayesReg(dat$GNP.deflator, dat[, -1], g=nrow(dat))
mod = BayesReg(dat$GNP.deflator, dat[, c(-1, -7)], g=nrow(dat))
install.packages("BayesFactor")
library("BayesFactor")
? BayesFactor
colnames(dat)
bf.full = lmBF(GNP.deflator ~
GNP + Unemployed + Armed.Forces + Population + Year + Employed,
data = dat)
bf = lmBF(GNP.deflator ~
GNP + Armed.Forces + Population + Year + Employed,
data = dat)
bf.full
bf
bf.full / bf
mod = BayesReg(dat$GNP.deflator, dat[, c(-1, -3)], g=nrow(dat))
