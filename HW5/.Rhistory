install.packages("R2WinBUGS")
library(R2WinBUGS)
library(WinBUGS)
library(RBugs)
library(BUGS)
install.packages("R2WinBUGS")
library(BUGS)
library(WinBUGS)
library(R2WinBUGS)
install.packages("foreign")
n = 1000
p = 1/6
? qnorm
qnorm(0)
qnorm(0.05, mean = n*p, sd = sqrt(n*p*(1-p)))
qnorm(0.25, mean = n*p, sd = sqrt(n*p*(1-p)))
qnorm(0.50, mean = n*p, sd = sqrt(n*p*(1-p)))
qnorm(0.75, mean = n*p, sd = sqrt(n*p*(1-p)))
qnorm(0.95, mean = n*p, sd = sqrt(n*p*(1-p)))
? beta
func <- function(a, b, n, y) {}
func <- function(a, b, n, y) {
t1 = a*b/((a+b)^2*(a+b+1))
t2 = (a+y)*(b+n-y)/((a+b+n)^2*(a+b+n+1))
return (t2 - t1)
}
func(2,2,100,30)
func(1,1,100,30)
func(2,3,100,70)
func(2,3,100,50)
func(2,3,100,10)
func(2,3,100,99)
func(3,3,100,99)
func(4,4,100,50)
func(4,4,100,10)
func(10,10,100,50)
func(20,10,100,50)
func(20,20,100,50)
func(20,20,5,1)
func(2,10,5,1)
func(2,1,1,1)
func(2,1,1,0)
func(2,3,1,0)
func(4.5,3,1,0)
func(5,20,1,0)
func(5,10,1,0)
func(5,100,1,0)
func(5,100,2,0)
func(5,100,2,1)
func(5,1,2,1)
func(1,5,2,1)
func(1,3,2,1)
func(1,4,2,1)
func(1,5,2,1)
func(1,6,2,1)
func <- function(n) {
}
1/1600 + 10/400
1/(1/1600 + 10/400)
n = 10
s = 1/1600 + n/400
m = s/2 * (180/1600 + 150*n/400)
s = 1/ (1/1600 + n/400)
m = s/2 * (180/1600 + 150*n/400)
m
m = s * (180/1600 + 150*n/400)
m
s
n = 100
s = 1/ (1/1600 + n/400)
m = s * (180/1600 + 150*n/400)
s
m
d = 0.6
c = 0.5
d^2 / sqrt((1-d^2)^2 + (2*c*d)^2)
2*c*d / (1 - d^2)
d = 0.2
d^2 / sqrt((1-d^2)^2 + (2*c*d)^2)
2*c*d / (1 - d^2)
atan(2*c*d / (1 - d^2))
atan(2*c*d / (1 - d^2)) * 180 / 3.14
atan(0.9375) * 180 / 3.14
q()
setwd("C:/Users/Fan/ownCloud/Study/2018spring/Bayesian/HW5")
? png
data.observed = c(28, 18, 12, 8, 7, 1, -1, -3)
data.simulated = c(26, 19, 14, 10, 6, 2, -3, -9)
png("data.vs.png", width=800, height=600)
plot(data.observed, data.simulted, main="Simulated v.s. simulated order statistics")
dev.off()
data.observed = c(28, 18, 12, 8, 7, 1, -1, -3)
data.simulated = c(26, 19, 14, 10, 6, 2, -3, -9)
png("data.vs.png", width=800, height=600)
plot(data.observed, data.simulated, main="Simulated v.s. simulated order statistics")
dev.off()
mod = lm(data.simulated ~ data.observed)
mod
summary(mod_)
summary(mod)
mod = lm((data.simulated - data.observed) ~ data.observed)
summary(mod)
? rbeta
? rbin
rbinom
? rbinom
T0 = 3 # number of switches
N = 1000
T = 1:N
theta = rbeta(N, shape1=7+1, shape2=13+1)
for (j in 1:N) {
count.switches = 0
y.last = rbinom(1, size=1, prob=theta[j])
count.zeros = 1 - y.last
while (1) {
y = rbinom(1, size=1, prob=theta[j])
if (y != y.last) {
count.switches = count.switches + 1
}
count.zeros = count.zeros + 1 - y.last
if (count.zeros == 13) {
break;
}
}
T[j] = count.switches
}
T0 = 3 # number of switches
N = 1
T = 1:N
theta = rbeta(N, shape1=7+1, shape2=13+1)
for (j in 1:N) {
count.switches = 0
y.last = rbinom(1, size=1, prob=theta[j])
count.zeros = 1 - y.last
while (1) {
y = rbinom(1, size=1, prob=theta[j])
if (y != y.last) {
count.switches = count.switches + 1
}
count.zeros = count.zeros + 1 - y.last
if (count.zeros == 13) {
break;
}
}
T[j] = count.switches
}
hist(T)
T0 = 3 # number of switches
N = 10
T = 1:N
theta = rbeta(N, shape1=7+1, shape2=13+1)
for (j in 1:N) {
count.switches = 0
y.last = rbinom(1, size=1, prob=theta[j])
count.zeros = 1 - y.last
while (1) {
y = rbinom(1, size=1, prob=theta[j])
if (y != y.last) {
count.switches = count.switches + 1
}
count.zeros = count.zeros + 1 - y.last
if (count.zeros == 13) {
break;
}
}
T[j] = count.switches
}
rbinom(1, 1, 0.5)
T0 = 3 # number of switches
N = 10
T = 1:N
theta = rbeta(N, shape1=7+1, shape2=13+1)
for (j in 1:N) {
count.switches = 0
y.last = rbinom(1, size=1, prob=theta[j])
count.zeros = 1 - y.last
while (1) {
y = rbinom(1, size=1, prob=theta[j])
if (y != y.last) {
count.switches = count.switches + 1
}
count.zeros = count.zeros + 1 - y.last
if (count.zeros > 12.5) {
break;
}
}
T[j] = count.switches
}
T0 = 3 # number of switches
N = 2
T = 1:N
theta = rbeta(N, shape1=7+1, shape2=13+1)
theta
for (j in 1:N) {
count.switches = 0
y.last = rbinom(1, size=1, prob=theta[j])
count.zeros = 1 - y.last
while (1) {
y = rbinom(1, size=1, prob=theta[j])
if (y != y.last) {
count.switches = count.switches + 1
}
count.zeros = count.zeros + 1 - y.last
if (count.zeros > 12.5) {
break;
}
}
T[j] = count.switches
}
hist(T)
T0 = 3 # number of switches
N = 5
T = 1:N
theta = rbeta(N, shape1=7+1, shape2=13+1)
theta
for (j in 1:N) {
count.switches = 0
y.last = rbinom(1, size=1, prob=theta[j])
count.zeros = 1 - y.last
while (1) {
y = rbinom(1, size=1, prob=theta[j])
if (y != y.last) {
count.switches = count.switches + 1
}
count.zeros = count.zeros + 1 - y.last
if (count.zeros > 12.5) {
break;
}
}
T[j] = count.switches
}
T0 = 3 # number of switches
N = 5
T = 1:N
theta = rbeta(N, shape1=7+1, shape2=13+1)
theta
for (j in 1:N) {
count.switches = 0
y.last = rbinom(1, size=1, prob=theta[j])
count.zeros = 1 - y.last
while (1) {
y = rbinom(1, size=1, prob=theta[j])
if (y != y.last) {
count.switches = count.switches + 1
}
count.zeros = count.zeros + 1 - y.last
if (count.zeros > 12.5) {
break;
}
y.last = y
}
T[j] = count.switches
}
hist(T)
T0 = 3 # number of switches
N = 1000
T = 1:N
theta = rbeta(N, shape1=7+1, shape2=13+1)
theta
for (j in 1:N) {
count.switches = 0
y.last = rbinom(1, size=1, prob=theta[j])
count.zeros = 1 - y.last
while (1) {
y = rbinom(1, size=1, prob=theta[j])
if (y != y.last) {
count.switches = count.switches + 1
}
count.zeros = count.zeros + 1 - y.last
if (count.zeros > 12.5) {
break;
}
y.last = y
}
T[j] = count.switches
}
hist(T)
T0 = 3 # number of switches
N = 1000
T = 1:N
theta = rbeta(N, shape1=7+1, shape2=13+1)
for (j in 1:N) {
count.switches = 0
y.last = rbinom(1, size=1, prob=theta[j])
count.zeros = 1 - y.last
while (1) {
y = rbinom(1, size=1, prob=theta[j])
if (y != y.last) {
count.switches = count.switches + 1
}
count.zeros = count.zeros + 1 - y.last
if (count.zeros > 12.5) {
break;
}
y.last = y
}
T[j] = count.switches
}
hist(T)
T0 = 3 # number of switches
N = 1000
T = 1:N
theta = rbeta(N, shape1=7+1, shape2=13+1)
for (j in 1:N) {
count.switches = 0
y.last = rbinom(1, size=1, prob=theta[j])
count.zeros = 1 - y.last
while (1) {
y = rbinom(1, size=1, prob=theta[j])
if (y != y.last) {
count.switches = count.switches + 1
}
count.zeros = count.zeros + 1 - y.last
if (count.zeros > 12.5) {
break;
}
y.last = y
}
T[j] = count.switches
}
png("switches.histogram.png", width=800, height=600)
hist(T)
dev.off()
T0 = 3 # number of switches
N = 10000
T = 1:N
theta = rbeta(N, shape1=7+1, shape2=13+1)
for (j in 1:N) {
count.switches = 0
y.last = rbinom(1, size=1, prob=theta[j])
count.zeros = 1 - y.last
while (1) {
y = rbinom(1, size=1, prob=theta[j])
if (y != y.last) {
count.switches = count.switches + 1
}
count.zeros = count.zeros + 1 - y.last
if (count.zeros > 12.5) {
break;
}
y.last = y
}
T[j] = count.switches
}
png("switches.histogram.png", width=800, height=600)
hist(T)
dev.off()
? hist
png("switches.histogram.png", width=800, height=600)
hist(T, breaks=seq(-0.5, max(T)+0.5))
dev.off()
