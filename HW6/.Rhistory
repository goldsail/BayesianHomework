install.packages("R2WinBUGS")
library(R2WinBUGS)
library(WinBUGS)
library(RBugs)
library(BUGS)
install.packages("R2WinBUGS")
library(BUGS)
library(WinBUGS)
library(R2WinBUGS)
install.packages("foreign")
n = 1000
p = 1/6
? qnorm
qnorm(0)
qnorm(0.05, mean = n*p, sd = sqrt(n*p*(1-p)))
qnorm(0.25, mean = n*p, sd = sqrt(n*p*(1-p)))
qnorm(0.50, mean = n*p, sd = sqrt(n*p*(1-p)))
qnorm(0.75, mean = n*p, sd = sqrt(n*p*(1-p)))
qnorm(0.95, mean = n*p, sd = sqrt(n*p*(1-p)))
? beta
func <- function(a, b, n, y) {}
func <- function(a, b, n, y) {
t1 = a*b/((a+b)^2*(a+b+1))
t2 = (a+y)*(b+n-y)/((a+b+n)^2*(a+b+n+1))
return (t2 - t1)
}
func(2,2,100,30)
func(1,1,100,30)
func(2,3,100,70)
func(2,3,100,50)
func(2,3,100,10)
func(2,3,100,99)
func(3,3,100,99)
func(4,4,100,50)
func(4,4,100,10)
func(10,10,100,50)
func(20,10,100,50)
func(20,20,100,50)
func(20,20,5,1)
func(2,10,5,1)
func(2,1,1,1)
func(2,1,1,0)
func(2,3,1,0)
func(4.5,3,1,0)
func(5,20,1,0)
func(5,10,1,0)
func(5,100,1,0)
func(5,100,2,0)
func(5,100,2,1)
func(5,1,2,1)
func(1,5,2,1)
func(1,3,2,1)
func(1,4,2,1)
func(1,5,2,1)
func(1,6,2,1)
func <- function(n) {
}
1/1600 + 10/400
1/(1/1600 + 10/400)
n = 10
s = 1/1600 + n/400
m = s/2 * (180/1600 + 150*n/400)
s = 1/ (1/1600 + n/400)
m = s/2 * (180/1600 + 150*n/400)
m
m = s * (180/1600 + 150*n/400)
m
s
n = 100
s = 1/ (1/1600 + n/400)
m = s * (180/1600 + 150*n/400)
s
m
d = 0.6
c = 0.5
d^2 / sqrt((1-d^2)^2 + (2*c*d)^2)
2*c*d / (1 - d^2)
d = 0.2
d^2 / sqrt((1-d^2)^2 + (2*c*d)^2)
2*c*d / (1 - d^2)
atan(2*c*d / (1 - d^2))
atan(2*c*d / (1 - d^2)) * 180 / 3.14
atan(0.9375) * 180 / 3.14
q()
setwd("C:/Users/Fan/ownCloud/Study/2018Spring/Bayesian/HW6")
? rt
set.seed(2018)
for (S in c(100, 10000)) {
ts = rt(S, 3)
}
? lapply
set.seed(2018)
weight <- function(x) {
return (dnorm(x) / dt(x, 3))
}
for (S in c(100, 10000)) {
t = rt(S, 3)
w = unlist(lapply(t, weight))
}
set.seed(2018)
weight <- function(x) {
return (dnorm(x) / dt(x, 3))
}
for (S in c(100, 10000)) {
t = rt(S, 3)
w = unlist(lapply(t, weight))
hist(log(w))
}
? hist
set.seed(2018)
weight <- function(x) {
return (dnorm(x) / dt(x, 3))
}
for (S in c(100, 10000)) {
t = rt(S, 3)
w = unlist(lapply(t, weight))
hist(log(w), breaks = 100)
}
min(log(w))
min(w)
max(w)
min(t)
max(t)
? rt
min(t)
max(t)
dorm(2) / dt(2, 3)
dnorm(2) / dt(2, 3)
min(w-t_)
min(w-t)
max(w-t)
w
t
set.seed(2018)
weight <- function(x) {
return (dnorm(x) / dt(x, 3))
}
for (S in c(100)) {
t = rt(S, 3)
w = unlist(lapply(t, weight))
hist(log(w), breaks = 100)
}
t
w
w-t
min(t)
min(w)
max(t)
max(w)
hist(w, breaks = 100)
? png
? printf
? sprintf
? png
set.seed(2018)
weight <- function(x) {
return (dnorm(x) / dt(x, 3))
}
for (S in c(100, 10000)) {
t = rt(S, 3)
w = unlist(lapply(t, weight))
png(sprintf("weight_%d.png", S), width = 640, height = 480)
hist(w, breaks = 100)
dev.off()
png(sprintf("log_weight_%d.png", S), width = 640, height = 480)
hist(log(w), breaks = 100)
dev.off()
}
set.seed(2018)
weight <- function(x) {
return (dnorm(x) / dt(x, 3))
}
for (S in c(100, 10000)) {
t = rt(S, 3)
w = unlist(lapply(t, weight))
png(sprintf("weight_%d.png", S), width = 640, height = 480)
hist(w, breaks = 100)
dev.off()
png(sprintf("log_weight_%d.png", S), width = 640, height = 480)
hist(log(w), breaks = 100)
dev.off()
first.order = mean(t * w) / mean(w)
second.order = mean(t^2 * w) / mean(w)
(expectation = first.order)
(variance = second.order - first.order^2)
}
set.seed(2018)
weight <- function(x) {
return (dnorm(x) / dt(x, 3))
}
for (S in c(100, 10000)) {
t = rt(S, 3)
w = unlist(lapply(t, weight))
png(sprintf("weight_%d.png", S), width = 640, height = 480)
hist(w, breaks = 100)
dev.off()
png(sprintf("log_weight_%d.png", S), width = 640, height = 480)
hist(log(w), breaks = 100)
dev.off()
first.order = mean(t * w) / mean(w)
second.order = mean(t^2 * w) / mean(w)
expectation = first.order
variance = second.order - first.order^2
expectation
variance
}
set.seed(2018)
weight <- function(x) {
return (dnorm(x) / dt(x, 3))
}
for (S in c(100, 10000)) {
t = rt(S, 3)
w = unlist(lapply(t, weight))
png(sprintf("weight_%d.png", S), width = 640, height = 480)
hist(w, breaks = 100)
dev.off()
png(sprintf("log_weight_%d.png", S), width = 640, height = 480)
hist(log(w), breaks = 100)
dev.off()
first.order = mean(t * w) / mean(w)
second.order = mean(t^2 * w) / mean(w)
expectation = first.order
variance = second.order - first.order^2
print(sprintf("size = %d, expectation = %f, variance = %f", S, expectation, variance))
}
set.seed(2018)
weight <- function(x) {
return (dnorm(x) / dt(x, 3))
}
for (S in c(100, 10000)) {
t = rt(S, 3)
w = unlist(lapply(t, weight))
png(sprintf("1_weight_%d.png", S), width = 640, height = 480)
hist(w, breaks = 100)
dev.off()
png(sprintf("1_log_weight_%d.png", S), width = 640, height = 480)
hist(log(w), breaks = 100)
dev.off()
first.order = mean(t * w) / mean(w)
second.order = mean(t^2 * w) / mean(w)
expectation = first.order
variance = second.order - first.order^2
print(sprintf("1: size = %d, expectation = %f, variance = %f", S, expectation, variance))
}
weight <- function(x) {
return (dt(x, 3) / dnorm(x))
}
for (S in c(100, 10000)) {
n = rnorm(S)
w = unlist(lapply(t, weight))
png(sprintf("2_weight_%d.png", S), width = 640, height = 480)
hist(w, breaks = 100)
dev.off()
png(sprintf("2_log_weight_%d.png", S), width = 640, height = 480)
hist(log(w), breaks = 100)
dev.off()
first.order = mean(n * w) / mean(w)
second.order = mean(n^2 * w) / mean(w)
expectation = first.order
variance = second.order - first.order^2
print(sprintf("2: size = %d, expectation = %f, variance = %f", S, expectation, variance))
}
set.seed(2018)
weight <- function(x) {
return (dnorm(x) / dt(x, 3))
}
for (S in c(100, 10000)) {
t = rt(S, 3)
w = unlist(lapply(t, weight))
png(sprintf("1_weight_%d.png", S), width = 640, height = 480)
hist(w, breaks = 100)
dev.off()
png(sprintf("1_log_weight_%d.png", S), width = 640, height = 480)
hist(log(w), breaks = 100)
dev.off()
first.order = mean(t * w) / mean(w)
second.order = mean(t^2 * w) / mean(w)
expectation = first.order
variance = second.order - first.order^2
print(sprintf("1: size = %d, expectation = %f, variance = %f", S, expectation, variance))
}
weight <- function(x) {
return (dt(x, 3) / dnorm(x))
}
for (S in c(100, 10000)) {
n = rnorm(S)
w = unlist(lapply(n, weight))
png(sprintf("2_weight_%d.png", S), width = 640, height = 480)
hist(w, breaks = 100)
dev.off()
png(sprintf("2_log_weight_%d.png", S), width = 640, height = 480)
hist(log(w), breaks = 100)
dev.off()
first.order = mean(n * w) / mean(w)
second.order = mean(n^2 * w) / mean(w)
expectation = first.order
variance = second.order - first.order^2
print(sprintf("2: size = %d, expectation = %f, variance = %f", S, expectation, variance))
}
? dnorm
set.seed(2018)
weight <- function(x) {
return (dnorm(x, sd = sqrt(3)) / dt(x, 3))
}
for (S in c(100, 10000)) {
t = rt(S, 3)
w = unlist(lapply(t, weight))
png(sprintf("1_weight_%d.png", S), width = 640, height = 480)
hist(w, breaks = 100)
dev.off()
png(sprintf("1_log_weight_%d.png", S), width = 640, height = 480)
hist(log(w), breaks = 100)
dev.off()
first.order = mean(t * w) / mean(w)
second.order = mean(t^2 * w) / mean(w)
expectation = first.order
variance = second.order - first.order^2
print(sprintf("1: size = %d, expectation = %f, variance = %f", S, expectation, variance))
}
weight <- function(x) {
return (dt(x, 3) / dnorm(x, sd = sqrt(3)))
}
for (S in c(100, 10000)) {
n = rnorm(S, sd = sqrt(3))
w = unlist(lapply(n, weight))
png(sprintf("2_weight_%d.png", S), width = 640, height = 480)
hist(w, breaks = 100)
dev.off()
png(sprintf("2_log_weight_%d.png", S), width = 640, height = 480)
hist(log(w), breaks = 100)
dev.off()
first.order = mean(n * w) / mean(w)
second.order = mean(n^2 * w) / mean(w)
expectation = first.order
variance = second.order - first.order^2
print(sprintf("2: size = %d, expectation = %f, variance = %f", S, expectation, variance))
}
expectation = first.order
q()
